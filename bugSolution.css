The solution to this CSS specificity problem involves several approaches:

**1. Using the `!important` flag (generally discouraged):**

While this can override the issue, it is generally discouraged because it can lead to hard-to-maintain and less predictable stylesheets.

```css
div {
  color: blue !important;
}
```

**2. Re-ordering your styles:**  If you're careful with the order in which you place the styles, you may get the result you need.

**3. Being more specific with selectors:** Instead of relying on class combinations, use more precise selectors that perfectly match the element in question.

**4.  Using more descriptive class names:** Creating descriptive class names eliminates ambiguity and enhances the predictability of styling decisions, reducing chances of specificity conflicts.

```css
/* More specific selectors */
#myDiv {
  color: green;
}

.container-div {
 color: red; 
}

.another-class-div {
  color: orange; 
}

```

By restructuring your CSS to either make the most important selectors more specific or utilizing better class names, the chances of facing unexpected specificity problems are reduced drastically.